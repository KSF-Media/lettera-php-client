<?php
/**
 * ListArticle
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lettera
 *
 * KSF Media's articles service
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListArticle Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ListArticle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListArticle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'title' => 'string',
        'authors' => '\OpenAPI\Client\Model\Author[]',
        'tags' => 'string[]',
        'preamble' => 'string',
        'list_image' => '\OpenAPI\Client\Model\ImageInfo',
        'premium' => 'bool',
        'publishing_time' => 'string',
        'update_time' => 'string',
        'related_articles' => '\OpenAPI\Client\Model\RelatedArticle[]',
        'article_type' => '\OpenAPI\Client\Model\ArticleType',
        'article_type_details' => '\OpenAPI\Client\Model\ArticleTypeDetails',
        'paper' => '\OpenAPI\Client\Model\Paper',
        'share_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'uuid' => 'uuid',
        'title' => null,
        'authors' => null,
        'tags' => null,
        'preamble' => null,
        'list_image' => null,
        'premium' => null,
        'publishing_time' => 'yyyy-mm-ddThh:MM:ssZ',
        'update_time' => 'yyyy-mm-ddThh:MM:ssZ',
        'related_articles' => null,
        'article_type' => null,
        'article_type_details' => null,
        'paper' => null,
        'share_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'title' => 'title',
        'authors' => 'authors',
        'tags' => 'tags',
        'preamble' => 'preamble',
        'list_image' => 'listImage',
        'premium' => 'premium',
        'publishing_time' => 'publishingTime',
        'update_time' => 'updateTime',
        'related_articles' => 'relatedArticles',
        'article_type' => 'articleType',
        'article_type_details' => 'articleTypeDetails',
        'paper' => 'paper',
        'share_url' => 'shareUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'title' => 'setTitle',
        'authors' => 'setAuthors',
        'tags' => 'setTags',
        'preamble' => 'setPreamble',
        'list_image' => 'setListImage',
        'premium' => 'setPremium',
        'publishing_time' => 'setPublishingTime',
        'update_time' => 'setUpdateTime',
        'related_articles' => 'setRelatedArticles',
        'article_type' => 'setArticleType',
        'article_type_details' => 'setArticleTypeDetails',
        'paper' => 'setPaper',
        'share_url' => 'setShareUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'title' => 'getTitle',
        'authors' => 'getAuthors',
        'tags' => 'getTags',
        'preamble' => 'getPreamble',
        'list_image' => 'getListImage',
        'premium' => 'getPremium',
        'publishing_time' => 'getPublishingTime',
        'update_time' => 'getUpdateTime',
        'related_articles' => 'getRelatedArticles',
        'article_type' => 'getArticleType',
        'article_type_details' => 'getArticleTypeDetails',
        'paper' => 'getPaper',
        'share_url' => 'getShareUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['authors'] = isset($data['authors']) ? $data['authors'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['preamble'] = isset($data['preamble']) ? $data['preamble'] : null;
        $this->container['list_image'] = isset($data['list_image']) ? $data['list_image'] : null;
        $this->container['premium'] = isset($data['premium']) ? $data['premium'] : null;
        $this->container['publishing_time'] = isset($data['publishing_time']) ? $data['publishing_time'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['related_articles'] = isset($data['related_articles']) ? $data['related_articles'] : null;
        $this->container['article_type'] = isset($data['article_type']) ? $data['article_type'] : null;
        $this->container['article_type_details'] = isset($data['article_type_details']) ? $data['article_type_details'] : null;
        $this->container['paper'] = isset($data['paper']) ? $data['paper'] : null;
        $this->container['share_url'] = isset($data['share_url']) ? $data['share_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['authors'] === null) {
            $invalidProperties[] = "'authors' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['premium'] === null) {
            $invalidProperties[] = "'premium' can't be null";
        }
        if ($this->container['publishing_time'] === null) {
            $invalidProperties[] = "'publishing_time' can't be null";
        }
        if ($this->container['related_articles'] === null) {
            $invalidProperties[] = "'related_articles' can't be null";
        }
        if ($this->container['article_type'] === null) {
            $invalidProperties[] = "'article_type' can't be null";
        }
        if ($this->container['paper'] === null) {
            $invalidProperties[] = "'paper' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets authors
     *
     * @return \OpenAPI\Client\Model\Author[]
     */
    public function getAuthors()
    {
        return $this->container['authors'];
    }

    /**
     * Sets authors
     *
     * @param \OpenAPI\Client\Model\Author[] $authors authors
     *
     * @return $this
     */
    public function setAuthors($authors)
    {
        $this->container['authors'] = $authors;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets preamble
     *
     * @return string|null
     */
    public function getPreamble()
    {
        return $this->container['preamble'];
    }

    /**
     * Sets preamble
     *
     * @param string|null $preamble preamble
     *
     * @return $this
     */
    public function setPreamble($preamble)
    {
        $this->container['preamble'] = $preamble;

        return $this;
    }

    /**
     * Gets list_image
     *
     * @return \OpenAPI\Client\Model\ImageInfo|null
     */
    public function getListImage()
    {
        return $this->container['list_image'];
    }

    /**
     * Sets list_image
     *
     * @param \OpenAPI\Client\Model\ImageInfo|null $list_image list_image
     *
     * @return $this
     */
    public function setListImage($list_image)
    {
        $this->container['list_image'] = $list_image;

        return $this;
    }

    /**
     * Gets premium
     *
     * @return bool
     */
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     *
     * @param bool $premium premium
     *
     * @return $this
     */
    public function setPremium($premium)
    {
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets publishing_time
     *
     * @return string
     */
    public function getPublishingTime()
    {
        return $this->container['publishing_time'];
    }

    /**
     * Sets publishing_time
     *
     * @param string $publishing_time publishing_time
     *
     * @return $this
     */
    public function setPublishingTime($publishing_time)
    {
        $this->container['publishing_time'] = $publishing_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string|null $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets related_articles
     *
     * @return \OpenAPI\Client\Model\RelatedArticle[]
     */
    public function getRelatedArticles()
    {
        return $this->container['related_articles'];
    }

    /**
     * Sets related_articles
     *
     * @param \OpenAPI\Client\Model\RelatedArticle[] $related_articles related_articles
     *
     * @return $this
     */
    public function setRelatedArticles($related_articles)
    {
        $this->container['related_articles'] = $related_articles;

        return $this;
    }

    /**
     * Gets article_type
     *
     * @return \OpenAPI\Client\Model\ArticleType
     */
    public function getArticleType()
    {
        return $this->container['article_type'];
    }

    /**
     * Sets article_type
     *
     * @param \OpenAPI\Client\Model\ArticleType $article_type article_type
     *
     * @return $this
     */
    public function setArticleType($article_type)
    {
        $this->container['article_type'] = $article_type;

        return $this;
    }

    /**
     * Gets article_type_details
     *
     * @return \OpenAPI\Client\Model\ArticleTypeDetails|null
     */
    public function getArticleTypeDetails()
    {
        return $this->container['article_type_details'];
    }

    /**
     * Sets article_type_details
     *
     * @param \OpenAPI\Client\Model\ArticleTypeDetails|null $article_type_details article_type_details
     *
     * @return $this
     */
    public function setArticleTypeDetails($article_type_details)
    {
        $this->container['article_type_details'] = $article_type_details;

        return $this;
    }

    /**
     * Gets paper
     *
     * @return \OpenAPI\Client\Model\Paper
     */
    public function getPaper()
    {
        return $this->container['paper'];
    }

    /**
     * Sets paper
     *
     * @param \OpenAPI\Client\Model\Paper $paper paper
     *
     * @return $this
     */
    public function setPaper($paper)
    {
        $this->container['paper'] = $paper;

        return $this;
    }

    /**
     * Gets share_url
     *
     * @return string|null
     */
    public function getShareUrl()
    {
        return $this->container['share_url'];
    }

    /**
     * Sets share_url
     *
     * @param string|null $share_url share_url
     *
     * @return $this
     */
    public function setShareUrl($share_url)
    {
        $this->container['share_url'] = $share_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


