<?php
/**
 * Cutoff
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lettera
 *
 * <h2>KSF Media's articles service</h2> Changelog for V3: <ul><li>Unified <code>ListArticle</code> and <code>RelatedArticle</code> into a single type <code>ArticleStub</code>. NOTE: In contrast to the old types, <code>ArticleStub.relatedArticles</code> is now an optional value.</li> <li>Added endpoint <code>/article/{uuid}/stub</code></li> <li>Removed deprecated endpoint <code>/article/search</code></li> </ul>
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Cutoff Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Cutoff implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cutoff';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cutoff' => 'int',
        'bonus' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'cutoff' => null,
        'bonus' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cutoff' => 'cutoff',
        'bonus' => 'bonus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cutoff' => 'setCutoff',
        'bonus' => 'setBonus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cutoff' => 'getCutoff',
        'bonus' => 'getBonus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cutoff'] = isset($data['cutoff']) ? $data['cutoff'] : null;
        $this->container['bonus'] = isset($data['bonus']) ? $data['bonus'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cutoff'] === null) {
            $invalidProperties[] = "'cutoff' can't be null";
        }
        if (($this->container['cutoff'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'cutoff', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['cutoff'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'cutoff', must be bigger than or equal to -9223372036854775808.";
        }

        if ($this->container['bonus'] === null) {
            $invalidProperties[] = "'bonus' can't be null";
        }
        if (($this->container['bonus'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'bonus', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['bonus'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'bonus', must be bigger than or equal to -9223372036854775808.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cutoff
     *
     * @return int
     */
    public function getCutoff()
    {
        return $this->container['cutoff'];
    }

    /**
     * Sets cutoff
     *
     * @param int $cutoff cutoff
     *
     * @return $this
     */
    public function setCutoff($cutoff)
    {

        if (($cutoff > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $cutoff when calling Cutoff., must be smaller than or equal to 9223372036854775807.');
        }
        if (($cutoff < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $cutoff when calling Cutoff., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['cutoff'] = $cutoff;

        return $this;
    }

    /**
     * Gets bonus
     *
     * @return int
     */
    public function getBonus()
    {
        return $this->container['bonus'];
    }

    /**
     * Sets bonus
     *
     * @param int $bonus bonus
     *
     * @return $this
     */
    public function setBonus($bonus)
    {

        if (($bonus > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $bonus when calling Cutoff., must be smaller than or equal to 9223372036854775807.');
        }
        if (($bonus < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $bonus when calling Cutoff., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['bonus'] = $bonus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


