<?php
/**
 * ImageInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lettera
 *
 * <h2>KSF Media's articles service</h2> Changelog for V3: <ul><li>Unified <code>ListArticle</code> and <code>RelatedArticle</code> into a single type <code>ArticleStub</code>. NOTE: In contrast to the old types, <code>ArticleStub.relatedArticles</code> is now an optional value.</li> <li>Added endpoint <code>/article/{uuid}/stub</code></li> <li>Removed deprecated endpoint <code>/article/search</code></li> </ul>
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImageInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'url' => 'string',
        'thumb' => 'string',
        'tiny_thumb' => 'string',
        'thumb_size' => 'int',
        'caption' => 'string',
        'alignment' => '\OpenAPI\Client\Model\Alignment',
        'byline' => 'string',
        'classes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'url' => null,
        'thumb' => null,
        'tiny_thumb' => null,
        'thumb_size' => null,
        'caption' => null,
        'alignment' => null,
        'byline' => null,
        'classes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'thumb' => 'thumb',
        'tiny_thumb' => 'tinyThumb',
        'thumb_size' => 'thumbSize',
        'caption' => 'caption',
        'alignment' => 'alignment',
        'byline' => 'byline',
        'classes' => 'classes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'thumb' => 'setThumb',
        'tiny_thumb' => 'setTinyThumb',
        'thumb_size' => 'setThumbSize',
        'caption' => 'setCaption',
        'alignment' => 'setAlignment',
        'byline' => 'setByline',
        'classes' => 'setClasses'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'thumb' => 'getThumb',
        'tiny_thumb' => 'getTinyThumb',
        'thumb_size' => 'getThumbSize',
        'caption' => 'getCaption',
        'alignment' => 'getAlignment',
        'byline' => 'getByline',
        'classes' => 'getClasses'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['thumb'] = isset($data['thumb']) ? $data['thumb'] : null;
        $this->container['tiny_thumb'] = isset($data['tiny_thumb']) ? $data['tiny_thumb'] : null;
        $this->container['thumb_size'] = isset($data['thumb_size']) ? $data['thumb_size'] : null;
        $this->container['caption'] = isset($data['caption']) ? $data['caption'] : null;
        $this->container['alignment'] = isset($data['alignment']) ? $data['alignment'] : null;
        $this->container['byline'] = isset($data['byline']) ? $data['byline'] : null;
        $this->container['classes'] = isset($data['classes']) ? $data['classes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['thumb'] === null) {
            $invalidProperties[] = "'thumb' can't be null";
        }
        if ($this->container['tiny_thumb'] === null) {
            $invalidProperties[] = "'tiny_thumb' can't be null";
        }
        if (!is_null($this->container['thumb_size']) && ($this->container['thumb_size'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'thumb_size', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['thumb_size']) && ($this->container['thumb_size'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'thumb_size', must be bigger than or equal to -9223372036854775808.";
        }

        if ($this->container['classes'] === null) {
            $invalidProperties[] = "'classes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets thumb
     *
     * @return string
     */
    public function getThumb()
    {
        return $this->container['thumb'];
    }

    /**
     * Sets thumb
     *
     * @param string $thumb thumb
     *
     * @return $this
     */
    public function setThumb($thumb)
    {
        $this->container['thumb'] = $thumb;

        return $this;
    }

    /**
     * Gets tiny_thumb
     *
     * @return string
     */
    public function getTinyThumb()
    {
        return $this->container['tiny_thumb'];
    }

    /**
     * Sets tiny_thumb
     *
     * @param string $tiny_thumb tiny_thumb
     *
     * @return $this
     */
    public function setTinyThumb($tiny_thumb)
    {
        $this->container['tiny_thumb'] = $tiny_thumb;

        return $this;
    }

    /**
     * Gets thumb_size
     *
     * @return int|null
     */
    public function getThumbSize()
    {
        return $this->container['thumb_size'];
    }

    /**
     * Sets thumb_size
     *
     * @param int|null $thumb_size thumb_size
     *
     * @return $this
     */
    public function setThumbSize($thumb_size)
    {

        if (!is_null($thumb_size) && ($thumb_size > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $thumb_size when calling ImageInfo., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($thumb_size) && ($thumb_size < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $thumb_size when calling ImageInfo., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['thumb_size'] = $thumb_size;

        return $this;
    }

    /**
     * Gets caption
     *
     * @return string|null
     */
    public function getCaption()
    {
        return $this->container['caption'];
    }

    /**
     * Sets caption
     *
     * @param string|null $caption caption
     *
     * @return $this
     */
    public function setCaption($caption)
    {
        $this->container['caption'] = $caption;

        return $this;
    }

    /**
     * Gets alignment
     *
     * @return \OpenAPI\Client\Model\Alignment|null
     */
    public function getAlignment()
    {
        return $this->container['alignment'];
    }

    /**
     * Sets alignment
     *
     * @param \OpenAPI\Client\Model\Alignment|null $alignment alignment
     *
     * @return $this
     */
    public function setAlignment($alignment)
    {
        $this->container['alignment'] = $alignment;

        return $this;
    }

    /**
     * Gets byline
     *
     * @return string|null
     */
    public function getByline()
    {
        return $this->container['byline'];
    }

    /**
     * Sets byline
     *
     * @param string|null $byline byline
     *
     * @return $this
     */
    public function setByline($byline)
    {
        $this->container['byline'] = $byline;

        return $this;
    }

    /**
     * Gets classes
     *
     * @return string[]
     */
    public function getClasses()
    {
        return $this->container['classes'];
    }

    /**
     * Sets classes
     *
     * @param string[] $classes classes
     *
     * @return $this
     */
    public function setClasses($classes)
    {
        $this->container['classes'] = $classes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


