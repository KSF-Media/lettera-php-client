<?php
/**
 * RelatedArticle
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lettera
 *
 * KSF Media's articles service
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RelatedArticle Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RelatedArticle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RelatedArticle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'title' => 'string',
        'preamble' => 'string',
        'list_image' => '\OpenAPI\Client\Model\ImageInfo',
        'publishing_time' => 'string',
        'premium' => 'bool',
        'tags' => 'string[]',
        'article_type_details' => '\OpenAPI\Client\Model\ArticleTypeDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'uuid' => 'uuid',
        'title' => null,
        'preamble' => null,
        'list_image' => null,
        'publishing_time' => 'yyyy-mm-ddThh:MM:ssZ',
        'premium' => null,
        'tags' => null,
        'article_type_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'title' => 'title',
        'preamble' => 'preamble',
        'list_image' => 'listImage',
        'publishing_time' => 'publishingTime',
        'premium' => 'premium',
        'tags' => 'tags',
        'article_type_details' => 'articleTypeDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'title' => 'setTitle',
        'preamble' => 'setPreamble',
        'list_image' => 'setListImage',
        'publishing_time' => 'setPublishingTime',
        'premium' => 'setPremium',
        'tags' => 'setTags',
        'article_type_details' => 'setArticleTypeDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'title' => 'getTitle',
        'preamble' => 'getPreamble',
        'list_image' => 'getListImage',
        'publishing_time' => 'getPublishingTime',
        'premium' => 'getPremium',
        'tags' => 'getTags',
        'article_type_details' => 'getArticleTypeDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['preamble'] = isset($data['preamble']) ? $data['preamble'] : null;
        $this->container['list_image'] = isset($data['list_image']) ? $data['list_image'] : null;
        $this->container['publishing_time'] = isset($data['publishing_time']) ? $data['publishing_time'] : null;
        $this->container['premium'] = isset($data['premium']) ? $data['premium'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['article_type_details'] = isset($data['article_type_details']) ? $data['article_type_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['publishing_time'] === null) {
            $invalidProperties[] = "'publishing_time' can't be null";
        }
        if ($this->container['premium'] === null) {
            $invalidProperties[] = "'premium' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets preamble
     *
     * @return string|null
     */
    public function getPreamble()
    {
        return $this->container['preamble'];
    }

    /**
     * Sets preamble
     *
     * @param string|null $preamble preamble
     *
     * @return $this
     */
    public function setPreamble($preamble)
    {
        $this->container['preamble'] = $preamble;

        return $this;
    }

    /**
     * Gets list_image
     *
     * @return \OpenAPI\Client\Model\ImageInfo|null
     */
    public function getListImage()
    {
        return $this->container['list_image'];
    }

    /**
     * Sets list_image
     *
     * @param \OpenAPI\Client\Model\ImageInfo|null $list_image list_image
     *
     * @return $this
     */
    public function setListImage($list_image)
    {
        $this->container['list_image'] = $list_image;

        return $this;
    }

    /**
     * Gets publishing_time
     *
     * @return string
     */
    public function getPublishingTime()
    {
        return $this->container['publishing_time'];
    }

    /**
     * Sets publishing_time
     *
     * @param string $publishing_time publishing_time
     *
     * @return $this
     */
    public function setPublishingTime($publishing_time)
    {
        $this->container['publishing_time'] = $publishing_time;

        return $this;
    }

    /**
     * Gets premium
     *
     * @return bool
     */
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     *
     * @param bool $premium premium
     *
     * @return $this
     */
    public function setPremium($premium)
    {
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets article_type_details
     *
     * @return \OpenAPI\Client\Model\ArticleTypeDetails|null
     */
    public function getArticleTypeDetails()
    {
        return $this->container['article_type_details'];
    }

    /**
     * Sets article_type_details
     *
     * @param \OpenAPI\Client\Model\ArticleTypeDetails|null $article_type_details article_type_details
     *
     * @return $this
     */
    public function setArticleTypeDetails($article_type_details)
    {
        $this->container['article_type_details'] = $article_type_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


