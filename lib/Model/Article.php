<?php
/**
 * Article
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Lettera
 *
 * <h2>KSF Media's articles service</h2> Changelog for V3: <ul><li>Unified <code>ListArticle</code> and <code>RelatedArticle</code> into a single type <code>ArticleStub</code>. NOTE: In contrast to the old types, <code>ArticleStub.relatedArticles</code> is now an optional value.</li> <li>Added endpoint <code>/article/{uuid}/stub</code></li> <li>Removed deprecated endpoint <code>/article/search</code></li> </ul>
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Article Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Article implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Article';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'title' => 'string',
        'list_title' => 'string',
        'authors' => '\OpenAPI\Client\Model\Author[]',
        'tags' => 'string[]',
        'preamble' => 'string',
        'main_image' => '\OpenAPI\Client\Model\ImageInfo',
        'list_image' => '\OpenAPI\Client\Model\ImageInfo',
        'body' => '\OpenAPI\Client\Model\Block[]',
        'premium' => 'bool',
        'publishing_time' => 'string',
        'update_time' => 'string',
        'article_type' => '\OpenAPI\Client\Model\ArticleType',
        'article_type_details' => '\OpenAPI\Client\Model\ArticleTypeDetails',
        'external_scripts' => 'string[]',
        'related_articles' => '\OpenAPI\Client\Model\ArticleStub[]',
        'share_url' => 'string',
        'paper' => '\OpenAPI\Client\Model\Paper',
        'analytics_category' => 'string',
        'analytics_section' => 'string',
        'article_priority' => 'int',
        'article_time_on_site' => 'int',
        'remove_ads' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'uuid' => 'uuid',
        'title' => null,
        'list_title' => null,
        'authors' => null,
        'tags' => null,
        'preamble' => null,
        'main_image' => null,
        'list_image' => null,
        'body' => null,
        'premium' => null,
        'publishing_time' => 'yyyy-mm-ddThh:MM:ssZ',
        'update_time' => 'yyyy-mm-ddThh:MM:ssZ',
        'article_type' => null,
        'article_type_details' => null,
        'external_scripts' => null,
        'related_articles' => null,
        'share_url' => null,
        'paper' => null,
        'analytics_category' => null,
        'analytics_section' => null,
        'article_priority' => null,
        'article_time_on_site' => null,
        'remove_ads' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'title' => 'title',
        'list_title' => 'listTitle',
        'authors' => 'authors',
        'tags' => 'tags',
        'preamble' => 'preamble',
        'main_image' => 'mainImage',
        'list_image' => 'listImage',
        'body' => 'body',
        'premium' => 'premium',
        'publishing_time' => 'publishingTime',
        'update_time' => 'updateTime',
        'article_type' => 'articleType',
        'article_type_details' => 'articleTypeDetails',
        'external_scripts' => 'externalScripts',
        'related_articles' => 'relatedArticles',
        'share_url' => 'shareUrl',
        'paper' => 'paper',
        'analytics_category' => 'analyticsCategory',
        'analytics_section' => 'analyticsSection',
        'article_priority' => 'articlePriority',
        'article_time_on_site' => 'articleTimeOnSite',
        'remove_ads' => 'removeAds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'title' => 'setTitle',
        'list_title' => 'setListTitle',
        'authors' => 'setAuthors',
        'tags' => 'setTags',
        'preamble' => 'setPreamble',
        'main_image' => 'setMainImage',
        'list_image' => 'setListImage',
        'body' => 'setBody',
        'premium' => 'setPremium',
        'publishing_time' => 'setPublishingTime',
        'update_time' => 'setUpdateTime',
        'article_type' => 'setArticleType',
        'article_type_details' => 'setArticleTypeDetails',
        'external_scripts' => 'setExternalScripts',
        'related_articles' => 'setRelatedArticles',
        'share_url' => 'setShareUrl',
        'paper' => 'setPaper',
        'analytics_category' => 'setAnalyticsCategory',
        'analytics_section' => 'setAnalyticsSection',
        'article_priority' => 'setArticlePriority',
        'article_time_on_site' => 'setArticleTimeOnSite',
        'remove_ads' => 'setRemoveAds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'title' => 'getTitle',
        'list_title' => 'getListTitle',
        'authors' => 'getAuthors',
        'tags' => 'getTags',
        'preamble' => 'getPreamble',
        'main_image' => 'getMainImage',
        'list_image' => 'getListImage',
        'body' => 'getBody',
        'premium' => 'getPremium',
        'publishing_time' => 'getPublishingTime',
        'update_time' => 'getUpdateTime',
        'article_type' => 'getArticleType',
        'article_type_details' => 'getArticleTypeDetails',
        'external_scripts' => 'getExternalScripts',
        'related_articles' => 'getRelatedArticles',
        'share_url' => 'getShareUrl',
        'paper' => 'getPaper',
        'analytics_category' => 'getAnalyticsCategory',
        'analytics_section' => 'getAnalyticsSection',
        'article_priority' => 'getArticlePriority',
        'article_time_on_site' => 'getArticleTimeOnSite',
        'remove_ads' => 'getRemoveAds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['list_title'] = isset($data['list_title']) ? $data['list_title'] : null;
        $this->container['authors'] = isset($data['authors']) ? $data['authors'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['preamble'] = isset($data['preamble']) ? $data['preamble'] : null;
        $this->container['main_image'] = isset($data['main_image']) ? $data['main_image'] : null;
        $this->container['list_image'] = isset($data['list_image']) ? $data['list_image'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['premium'] = isset($data['premium']) ? $data['premium'] : null;
        $this->container['publishing_time'] = isset($data['publishing_time']) ? $data['publishing_time'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['article_type'] = isset($data['article_type']) ? $data['article_type'] : null;
        $this->container['article_type_details'] = isset($data['article_type_details']) ? $data['article_type_details'] : null;
        $this->container['external_scripts'] = isset($data['external_scripts']) ? $data['external_scripts'] : null;
        $this->container['related_articles'] = isset($data['related_articles']) ? $data['related_articles'] : null;
        $this->container['share_url'] = isset($data['share_url']) ? $data['share_url'] : null;
        $this->container['paper'] = isset($data['paper']) ? $data['paper'] : null;
        $this->container['analytics_category'] = isset($data['analytics_category']) ? $data['analytics_category'] : null;
        $this->container['analytics_section'] = isset($data['analytics_section']) ? $data['analytics_section'] : null;
        $this->container['article_priority'] = isset($data['article_priority']) ? $data['article_priority'] : null;
        $this->container['article_time_on_site'] = isset($data['article_time_on_site']) ? $data['article_time_on_site'] : null;
        $this->container['remove_ads'] = isset($data['remove_ads']) ? $data['remove_ads'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uuid'] === null) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['authors'] === null) {
            $invalidProperties[] = "'authors' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['body'] === null) {
            $invalidProperties[] = "'body' can't be null";
        }
        if ($this->container['premium'] === null) {
            $invalidProperties[] = "'premium' can't be null";
        }
        if ($this->container['publishing_time'] === null) {
            $invalidProperties[] = "'publishing_time' can't be null";
        }
        if ($this->container['article_type'] === null) {
            $invalidProperties[] = "'article_type' can't be null";
        }
        if ($this->container['related_articles'] === null) {
            $invalidProperties[] = "'related_articles' can't be null";
        }
        if ($this->container['paper'] === null) {
            $invalidProperties[] = "'paper' can't be null";
        }
        if (!is_null($this->container['article_priority']) && ($this->container['article_priority'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'article_priority', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['article_priority']) && ($this->container['article_priority'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'article_priority', must be bigger than or equal to -9223372036854775808.";
        }

        if (!is_null($this->container['article_time_on_site']) && ($this->container['article_time_on_site'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'article_time_on_site', must be smaller than or equal to 9223372036854775807.";
        }

        if (!is_null($this->container['article_time_on_site']) && ($this->container['article_time_on_site'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'article_time_on_site', must be bigger than or equal to -9223372036854775808.";
        }

        if ($this->container['remove_ads'] === null) {
            $invalidProperties[] = "'remove_ads' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string $uuid uuid
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets list_title
     *
     * @return string|null
     */
    public function getListTitle()
    {
        return $this->container['list_title'];
    }

    /**
     * Sets list_title
     *
     * @param string|null $list_title list_title
     *
     * @return $this
     */
    public function setListTitle($list_title)
    {
        $this->container['list_title'] = $list_title;

        return $this;
    }

    /**
     * Gets authors
     *
     * @return \OpenAPI\Client\Model\Author[]
     */
    public function getAuthors()
    {
        return $this->container['authors'];
    }

    /**
     * Sets authors
     *
     * @param \OpenAPI\Client\Model\Author[] $authors authors
     *
     * @return $this
     */
    public function setAuthors($authors)
    {
        $this->container['authors'] = $authors;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets preamble
     *
     * @return string|null
     */
    public function getPreamble()
    {
        return $this->container['preamble'];
    }

    /**
     * Sets preamble
     *
     * @param string|null $preamble preamble
     *
     * @return $this
     */
    public function setPreamble($preamble)
    {
        $this->container['preamble'] = $preamble;

        return $this;
    }

    /**
     * Gets main_image
     *
     * @return \OpenAPI\Client\Model\ImageInfo|null
     */
    public function getMainImage()
    {
        return $this->container['main_image'];
    }

    /**
     * Sets main_image
     *
     * @param \OpenAPI\Client\Model\ImageInfo|null $main_image main_image
     *
     * @return $this
     */
    public function setMainImage($main_image)
    {
        $this->container['main_image'] = $main_image;

        return $this;
    }

    /**
     * Gets list_image
     *
     * @return \OpenAPI\Client\Model\ImageInfo|null
     */
    public function getListImage()
    {
        return $this->container['list_image'];
    }

    /**
     * Sets list_image
     *
     * @param \OpenAPI\Client\Model\ImageInfo|null $list_image list_image
     *
     * @return $this
     */
    public function setListImage($list_image)
    {
        $this->container['list_image'] = $list_image;

        return $this;
    }

    /**
     * Gets body
     *
     * @return \OpenAPI\Client\Model\Block[]
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param \OpenAPI\Client\Model\Block[] $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets premium
     *
     * @return bool
     */
    public function getPremium()
    {
        return $this->container['premium'];
    }

    /**
     * Sets premium
     *
     * @param bool $premium premium
     *
     * @return $this
     */
    public function setPremium($premium)
    {
        $this->container['premium'] = $premium;

        return $this;
    }

    /**
     * Gets publishing_time
     *
     * @return string
     */
    public function getPublishingTime()
    {
        return $this->container['publishing_time'];
    }

    /**
     * Sets publishing_time
     *
     * @param string $publishing_time publishing_time
     *
     * @return $this
     */
    public function setPublishingTime($publishing_time)
    {
        $this->container['publishing_time'] = $publishing_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string|null
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string|null $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets article_type
     *
     * @return \OpenAPI\Client\Model\ArticleType
     */
    public function getArticleType()
    {
        return $this->container['article_type'];
    }

    /**
     * Sets article_type
     *
     * @param \OpenAPI\Client\Model\ArticleType $article_type article_type
     *
     * @return $this
     */
    public function setArticleType($article_type)
    {
        $this->container['article_type'] = $article_type;

        return $this;
    }

    /**
     * Gets article_type_details
     *
     * @return \OpenAPI\Client\Model\ArticleTypeDetails|null
     */
    public function getArticleTypeDetails()
    {
        return $this->container['article_type_details'];
    }

    /**
     * Sets article_type_details
     *
     * @param \OpenAPI\Client\Model\ArticleTypeDetails|null $article_type_details article_type_details
     *
     * @return $this
     */
    public function setArticleTypeDetails($article_type_details)
    {
        $this->container['article_type_details'] = $article_type_details;

        return $this;
    }

    /**
     * Gets external_scripts
     *
     * @return string[]|null
     */
    public function getExternalScripts()
    {
        return $this->container['external_scripts'];
    }

    /**
     * Sets external_scripts
     *
     * @param string[]|null $external_scripts external_scripts
     *
     * @return $this
     */
    public function setExternalScripts($external_scripts)
    {
        $this->container['external_scripts'] = $external_scripts;

        return $this;
    }

    /**
     * Gets related_articles
     *
     * @return \OpenAPI\Client\Model\ArticleStub[]
     */
    public function getRelatedArticles()
    {
        return $this->container['related_articles'];
    }

    /**
     * Sets related_articles
     *
     * @param \OpenAPI\Client\Model\ArticleStub[] $related_articles related_articles
     *
     * @return $this
     */
    public function setRelatedArticles($related_articles)
    {
        $this->container['related_articles'] = $related_articles;

        return $this;
    }

    /**
     * Gets share_url
     *
     * @return string|null
     */
    public function getShareUrl()
    {
        return $this->container['share_url'];
    }

    /**
     * Sets share_url
     *
     * @param string|null $share_url share_url
     *
     * @return $this
     */
    public function setShareUrl($share_url)
    {
        $this->container['share_url'] = $share_url;

        return $this;
    }

    /**
     * Gets paper
     *
     * @return \OpenAPI\Client\Model\Paper
     */
    public function getPaper()
    {
        return $this->container['paper'];
    }

    /**
     * Sets paper
     *
     * @param \OpenAPI\Client\Model\Paper $paper paper
     *
     * @return $this
     */
    public function setPaper($paper)
    {
        $this->container['paper'] = $paper;

        return $this;
    }

    /**
     * Gets analytics_category
     *
     * @return string|null
     */
    public function getAnalyticsCategory()
    {
        return $this->container['analytics_category'];
    }

    /**
     * Sets analytics_category
     *
     * @param string|null $analytics_category analytics_category
     *
     * @return $this
     */
    public function setAnalyticsCategory($analytics_category)
    {
        $this->container['analytics_category'] = $analytics_category;

        return $this;
    }

    /**
     * Gets analytics_section
     *
     * @return string|null
     */
    public function getAnalyticsSection()
    {
        return $this->container['analytics_section'];
    }

    /**
     * Sets analytics_section
     *
     * @param string|null $analytics_section analytics_section
     *
     * @return $this
     */
    public function setAnalyticsSection($analytics_section)
    {
        $this->container['analytics_section'] = $analytics_section;

        return $this;
    }

    /**
     * Gets article_priority
     *
     * @return int|null
     */
    public function getArticlePriority()
    {
        return $this->container['article_priority'];
    }

    /**
     * Sets article_priority
     *
     * @param int|null $article_priority article_priority
     *
     * @return $this
     */
    public function setArticlePriority($article_priority)
    {

        if (!is_null($article_priority) && ($article_priority > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $article_priority when calling Article., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($article_priority) && ($article_priority < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $article_priority when calling Article., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['article_priority'] = $article_priority;

        return $this;
    }

    /**
     * Gets article_time_on_site
     *
     * @return int|null
     */
    public function getArticleTimeOnSite()
    {
        return $this->container['article_time_on_site'];
    }

    /**
     * Sets article_time_on_site
     *
     * @param int|null $article_time_on_site article_time_on_site
     *
     * @return $this
     */
    public function setArticleTimeOnSite($article_time_on_site)
    {

        if (!is_null($article_time_on_site) && ($article_time_on_site > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $article_time_on_site when calling Article., must be smaller than or equal to 9223372036854775807.');
        }
        if (!is_null($article_time_on_site) && ($article_time_on_site < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $article_time_on_site when calling Article., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['article_time_on_site'] = $article_time_on_site;

        return $this;
    }

    /**
     * Gets remove_ads
     *
     * @return bool
     */
    public function getRemoveAds()
    {
        return $this->container['remove_ads'];
    }

    /**
     * Sets remove_ads
     *
     * @param bool $remove_ads remove_ads
     *
     * @return $this
     */
    public function setRemoveAds($remove_ads)
    {
        $this->container['remove_ads'] = $remove_ads;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


